#include <stdio.h>
#include <set>

int main()
{
	const int MAX_LINE = 110;
	const int MULTIPLIER = 1000;

	int grid[MAX_LINE][MAX_LINE];
	char line[MAX_LINE];

	while (true)
	{
		int m, n;
		scanf("%d %d", &m, &n);
		printf("m=%d,n=%d\n", m, n);

		if (m == 0)
		{
			break;
		}

		for (int i = 0, j = n + 1; i <= j; ++i)
		{
			grid[0][i] = 0;
		}
		printf("1\n");

		for (int i = m + 1, j = 0, k = n + 1; j <= k; ++j)
		{
			grid[i][j] = 0;
		}
		printf("2\n");

		for (int i = 0, j = m + 1; i <= j; ++i)
		{
			grid[i][0] = 0;
		}
		printf("3\n");

		for (int i = 0, j = n + 1, k = m + 1; i <= k; ++i)
		{
			grid[i][j] = 0;
		}
		printf("4\n");

		std::set<int> global_backlog;

		for (int i = 1; i <= m; ++i)
		{
			scanf("%s", line);

			for (int j = 1, k = 0; j <= n; ++j, ++k)
			{
				if (line[k] == '@')
				{
					grid[i][j] = -1;
					global_backlog.insert(i * MULTIPLIER + j);
				}
				else
				{
					grid[i][j] = 0;
				}
			}
		}

		for (int i = 0, j = m + 1; i <= j; ++i)
		{
			for (int k = 0, l = n + 1; k <= l; ++k)
			{
				printf("%3d", grid[i][k]);
			}
			printf("\n");
		}

		printf("global_backlog:");
		for (const auto& i: global_backlog)
		{
			printf(" %d", i);
		}
		printf("\n");

		for (int cluster = 1; !global_backlog.empty(); ++cluster)
		{
			int oil_pocket = *global_backlog.begin();
			int x = oil_pocket / MULTIPLIER;
			int y = oil_pocket % 10;
			grid[x][y] = cluster;
			global_backlog.erase(oil_pocket);
		}

                for (int i = 0, j = m + 1; i <= j; ++i)
                {
                        for (int k = 0, l = n + 1; k <= l; ++k)
                        {
                                printf("%3d", grid[i][k]);
                        }
                        printf("\n");
                }
	}

	return 0;
}
