#include <stdio.h>
#include <vector>
#include <map>
#include <algorithm>

int main()
{
	std::vector<int> L, H, R;
	int num_bldgs;
	std::map<int, int> v;

	for (num_bldgs = 0; true; ++num_bldgs)
	{
		int tL, tH, tR;

		if (scanf("%d", &tL) == EOF || scanf("%d", &tH) == EOF || scanf("%d", &tR) == EOF)
		{
			break;
		}

		L.push_back(tL);
		H.push_back(tH);
		R.push_back(tR);
	}

/*
	for (int i = 0; i < num_bldgs; ++i)
	{
		printf("B%d %d %dE\n", L[i], H[i], R[i]);
	}
*/

	for (int i = 0; i < num_bldgs; ++i)
	{
		bool found_overlap = false;
		bool found_greater = false;

		for (int j = 0; j < i; ++j)
		{
			if (L[j] <= L[i] && L[i] <= R[j])
			{
				found_overlap = true;

				if (H[i] <= H[j])
				{
					found_greater = true;
					break;
				}
			}
		}

		if (!found_greater || !found_overlap)
		{
			v[L[i]] = H[i];
		}

		found_greater = false;
		std::vector<int> t;

		for (int j = 0; j < num_bldgs; ++j)
		{
			if (i == j)
			{
				continue;
			}

			if (L[j] <= R[i] && R[i] < R[j])
			{
				if (H[j] > H[i])
				{
					found_greater = true;
					break;
				}
				else if (H[j] < H[i])
				{
					t.push_back(H[j]);
				}
			}
		}

		if (found_greater)
		{
			continue;
		}

		if (t.empty())
		{
			v[R[i]] = 0;
		}
		else
		{
			v[R[i]] = *std::max_element(t.begin(), t.end());
		}
	}

/*
	std::vector<int> t;
	for (const auto& i: v)
	{
		t.push_back(i.first);
		t.push_back(i.second);
	}

	int len = t.size();
	--len;
	for (int i = 0; i < len; ++i)
	{
		printf("%d ", t[i]);
	}
	printf("%d\n", t[len]);
*/

	std::map<int, int>::iterator end = --v.end();
	for (std::map<int, int>::iterator it = v.begin(); it != end; ++it)
	{
		printf("%d %d ", it->first, it->second);
	}
	printf("%d %d\n", end->first, end->second);

	return 0;
}
